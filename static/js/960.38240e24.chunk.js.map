{"version":3,"file":"static/js/960.38240e24.chunk.js","mappings":"kPAMMA,EAAeC,EAAAA,KAAaC,MAAM,CACpCC,MAAOF,EAAAA,KACJE,MAAM,yBACNC,SAAS,4BACZC,SAAUJ,EAAAA,KAAaG,SAAS,8BAGrBE,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CAAER,MAAO,GAAIE,SAAU,IACtCO,SAAU,SAACC,EAAQC,IARF,SAACD,EAAQC,GAC5BP,GAASQ,EAAAA,EAAAA,IAAMF,IACfC,EAAQE,UAAU,CAAEb,MAAO,GAAIE,SAAU,KACzCY,EAAAA,OAAAA,QAAe,0BACjB,CAKMC,CAAaL,EAAQC,EACvB,EACAK,iBAAkBnB,EAAaoB,UAE/BX,EAAAA,EAAAA,KAACY,EAAAA,GAAI,CAACC,aAAa,MAAKF,UACtBG,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACEG,EAAAA,EAAAA,MAAA,SAAAH,SAAA,CAAO,SAELX,EAAAA,EAAAA,KAACe,EAAAA,GAAK,CAACC,KAAK,QAAQC,KAAK,WACzBjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAY,CAACF,KAAK,QAAQG,UAAU,aAEvCL,EAAAA,EAAAA,MAAA,SAAAH,SAAA,CAAO,YAELX,EAAAA,EAAAA,KAACe,EAAAA,GAAK,CAACC,KAAK,WAAWC,KAAK,cAC5BjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAY,CAACF,KAAK,WAAWG,UAAU,aAE1CnB,EAAAA,EAAAA,KAAA,UAAQiB,KAAK,SAAQN,SAAC,iBAKhC,E,oBCvCa,SAASS,IACpB,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1B,OACEX,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACEX,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CAAAf,UACLX,EAAAA,EAAAA,KAAA,SAAAW,SAAO,aAETX,EAAAA,EAAAA,KAACH,EAAS,IACTwB,IAAarB,EAAAA,EAAAA,KAAC2B,EAAAA,QAAO,IACrBH,IAASxB,EAAAA,EAAAA,KAAA,QAAAW,SAAM,iDAGtB,C,sKCjBWiB,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAC/CR,EAAkB,SAAAM,GAAK,OAAIA,EAAMC,SAAST,SAAU,EACpDI,EAAc,SAAAI,GAAK,OAAIA,EAAMC,SAASN,KAAM,EAC5CQ,EAAe,SAAAH,GAAK,OAAIA,EAAMI,OAAOA,MAAO,EAE5CC,GAAwBC,EAAAA,EAAAA,IACnC,CAACP,EAAgBI,IACjB,SAACF,EAAUG,GACT,OAAOH,EAASG,QAAO,SAAAG,GAAO,OAC5BA,EAAQpB,KAAKqB,cAAcC,SAASL,EAAOI,cAAc,GAE7D,G","sources":["components/LoginForm/LoginForm.js","pages/Login.js","redux/contacts/selectors.js"],"sourcesContent":["import { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { Notify } from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from '../../redux/auth/operations';\nimport * as Yup from 'yup';\n\nconst ContactShema = Yup.object().shape({\n    email: Yup.string()\n      .email('Invalid email address')\n      .required('This is a required field'),\n    password: Yup.string().required('This is a required field'),\n  });\n  \n  export const LoginForm = () => {\n    const dispatch = useDispatch();\n    const handleSubmit = (values, actions) => {\n      dispatch(logIn(values));\n      actions.resetForm({ email: '', password: '' });\n      Notify.success(`Authorization completed`);\n    };\n    return (\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        onSubmit={(values, actions) => {\n          handleSubmit(values, actions);\n        }}\n        validationSchema={ContactShema}\n      >\n        <Form autoComplete=\"off\">\n          <div>\n            <label>\n              Email\n              <Field name=\"email\" type=\"email\" />\n              <ErrorMessage name=\"email\" component=\"span\" />\n            </label>\n            <label>\n              Password\n              <Field name=\"password\" type=\"password\" />\n              <ErrorMessage name=\"password\" component=\"span\" />\n            </label>\n            <button type=\"submit\">Log In</button>\n          </div>\n        </Form>\n      </Formik>\n    );\n  };","import { LoginForm } from \"components/LoginForm/LoginForm\";\nimport { Loading } from \"notiflix\";\nimport { Helmet } from \"react-helmet\";\nimport { useSelector } from \"react-redux\";\nimport { selectError, selectIsLoading } from \"../redux/contacts/selectors\";\n\nexport default function Login() {\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    return (\n      <div>\n        <Helmet>\n          <title>Login</title>\n        </Helmet>\n        <LoginForm />\n        {isLoading && <Loading/>}\n        {error && <span>Whoops... Error! Please, reload this page!</span>}\n      </div>\n    );\n  }","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);"],"names":["ContactShema","Yup","shape","email","required","password","LoginForm","dispatch","useDispatch","_jsx","Formik","initialValues","onSubmit","values","actions","logIn","resetForm","Notify","handleSubmit","validationSchema","children","Form","autoComplete","_jsxs","Field","name","type","ErrorMessage","component","Login","isLoading","useSelector","selectIsLoading","error","selectError","Helmet","Loading","selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","contact","toLowerCase","includes"],"sourceRoot":""}