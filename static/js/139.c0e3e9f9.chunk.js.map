{"version":3,"file":"static/js/139.c0e3e9f9.chunk.js","mappings":"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","sources":["components/Loader/Loader.Styled.js","components/Loader/Loader.js","components/RegisterForm/RegisterForm.js","pages/Register.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledLoader = styled.div`\nmargin-top: 10px;\n`","import { Hourglass } from 'react-loader-spinner';\nimport { StyledLoader } from './Loader.Styled';\n\nconst Loader = () => {\n    return (\n        <StyledLoader>\n            <Hourglass\n            visible={true}\n            height=\"40\"\n            width=\"40\"\n            ariaLabel=\"hourglass-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"\"\n            colors={['#5dd7d2', '#5dd7d2']}\n          />\n        </StyledLoader>\n    )\n}\n\nexport default Loader;","import { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { Notify } from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/operations';\nimport * as Yup from 'yup';\n\nconst ContactShema = Yup.object().shape({\n    name: Yup.string()\n      .trim()\n      .min(2, 'Too Short!')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('This is a required field'),\n    email: Yup.string()\n      .email('Invalid email address')\n      .required('This is a required field'),\n    password: Yup.string()\n      .matches(\n        /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{5,}$/,\n        'Please create a stronger password. It must contain one uppercase and one lowercase letter'\n      )\n      .required('This is a required field'),\n  });\n  \n  export const RegisterForm = () => {\n    const dispatch = useDispatch();\n  \n    const handleSubmit = (values, actions) => {\n      dispatch(register(values));\n      Notify.success(`${values.name} registered!`);\n      actions.resetForm({ name: '', email: '', password: '' });\n    };\n  \n    return (\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        onSubmit={(values, actions) => {\n          handleSubmit(values, actions);\n        }}\n        validationSchema={ContactShema}\n      >\n        <Form autoComplete=\"off\">\n          <div>\n            <label>\n              Name\n              <Field name=\"name\" type=\"text\" />\n              <ErrorMessage name=\"name\" component=\"span\" />\n            </label>\n            <label>\n              Email\n              <Field name=\"email\" type=\"email\" />\n              <ErrorMessage name=\"email\" component=\"span\" />\n            </label>\n            <label>\n              Password\n              <Field name=\"password\" type=\"password\" />\n              <ErrorMessage name=\"password\" component=\"span\" />\n            </label>\n            <button type=\"submit\">Log In</button>\n          </div>\n        </Form>\n      </Formik>\n    );\n  };","import Loader from \"components/Loader/Loader\";\nimport { RegisterForm } from \"components/RegisterForm/RegisterForm\";\nimport { Helmet } from \"react-helmet\";\nimport { useSelector } from \"react-redux\";\nimport { selectError, selectIsLoading } from \"../redux/contacts/selectors\";\n\nexport default function Register() {\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    return (\n      <div>\n        <Helmet>\n          <title>Registration</title>\n        </Helmet>\n        <RegisterForm />\n        {isLoading && <Loader/>}\n        {error && <span>Whoops... Error! Please, reload this page!</span>}\n      </div>\n    );\n  }","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);"],"names":["StyledLoader","styled","_templateObject","_taggedTemplateLiteral","_jsx","children","Hourglass","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","ContactShema","Yup","shape","name","trim","min","matches","required","email","password","RegisterForm","dispatch","useDispatch","Formik","initialValues","onSubmit","values","actions","register","Notify","concat","resetForm","handleSubmit","validationSchema","Form","autoComplete","_jsxs","Field","type","ErrorMessage","component","Register","isLoading","useSelector","selectIsLoading","error","selectError","Helmet","Loader","selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","contact","toLowerCase","includes"],"sourceRoot":""}