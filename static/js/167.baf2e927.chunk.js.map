{"version":3,"file":"static/js/167.baf2e927.chunk.js","mappings":"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","sources":["components/Loader/Loader.Styled.js","components/Loader/Loader.js","components/RegisterForm/RegisterForm.Styled.js","components/RegisterForm/RegisterForm.js","pages/Register.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledLoader = styled.div`\nmargin-top: 10px;\n`","import { Hourglass } from 'react-loader-spinner';\nimport { StyledLoader } from './Loader.Styled';\n\nconst Loader = () => {\n    return (\n        <StyledLoader>\n            <Hourglass\n            visible={true}\n            height=\"40\"\n            width=\"40\"\n            ariaLabel=\"hourglass-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"\"\n            colors={['#5dd7d2', '#5dd7d2']}\n          />\n        </StyledLoader>\n    )\n}\n\nexport default Loader;","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n\n  gap: 16px;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n\n  padding: 15px;\n  background-color: #5dd7d2;\n  border: 1px solid #0daea7;\n  border-radius: 5px;\n  box-shadow: gray 1px 1px 5px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ErrMessageStyled = styled(ErrorMessage)`\n  color: red;\n`;\n\nexport const StyledField = styled(Field)`\n  width: 200px;\n  height: 40px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  border-radius: 4px;\n  margin: 0;\n  padding-left: 35px;\n`;\n\nexport const Button = styled.button`\n  width: 120px;\n  align-self: center;\n  padding: 10px;\n  color: white;\n  background-color: #4d83c2;\n  cursor: pointer;\n\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n`;\n","import { Formik } from 'formik';\nimport { Notify } from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/operations';\nimport * as Yup from 'yup';\nimport {\n  Button,\n  Container,\n  ErrMessageStyled,\n  Label,\n  StyledField,\n  StyledForm,\n} from './RegisterForm.Styled';\n\nconst ContactShema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .min(2, 'Too Short!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('This is a required field'),\n  email: Yup.string()\n    .email('Invalid email address')\n    .required('This is a required field'),\n  password: Yup.string()\n    .matches(\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{5,}$/,\n      'Please create a stronger password. It must contain one uppercase and one lowercase letter'\n    )\n    .required('This is a required field'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    dispatch(register(values));\n    Notify.success(`${values.name} registered!`);\n    actions.resetForm({ name: '', email: '', password: '' });\n  };\n\n  return (\n    <Container>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        onSubmit={(values, actions) => {\n          handleSubmit(values, actions);\n        }}\n        validationSchema={ContactShema}\n      >\n        <StyledForm autoComplete=\"off\">\n          \n            <Label>\n              <StyledField name=\"name\" type=\"text\" placeholder=\"Name\" />\n              <ErrMessageStyled name=\"name\" component=\"span\" />\n            </Label>\n            <Label>\n              <StyledField name=\"email\" type=\"email\" placeholder=\"Email\" />\n              <ErrMessageStyled name=\"email\" component=\"span\" />\n            </Label>\n            <Label>\n              <StyledField\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Password\"\n              />\n              <ErrMessageStyled name=\"password\" component=\"span\" />\n            </Label>\n            <Button type=\"submit\">Log In</Button>\n          \n        </StyledForm>\n      </Formik>\n    </Container>\n  );\n};\n","import Loader from \"components/Loader/Loader\";\nimport { RegisterForm } from \"components/RegisterForm/RegisterForm\";\nimport { Helmet } from \"react-helmet\";\nimport { useSelector } from \"react-redux\";\nimport { selectError, selectIsLoading } from \"../redux/contacts/selectors\";\n\nexport default function Register() {\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    return (\n      <div>\n        <Helmet>\n          <title>Registration</title>\n        </Helmet>\n        <RegisterForm />\n        {isLoading && <Loader/>}\n        {error && <span>Whoops... Error! Please, reload this page!</span>}\n      </div>\n    );\n  }","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);"],"names":["StyledLoader","styled","_templateObject","_taggedTemplateLiteral","_jsx","children","Hourglass","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","StyledForm","Form","Container","_templateObject2","Label","_templateObject3","ErrMessageStyled","ErrorMessage","_templateObject4","StyledField","Field","_templateObject5","Button","_templateObject6","ContactShema","Yup","shape","name","trim","min","matches","required","email","password","RegisterForm","dispatch","useDispatch","Formik","initialValues","onSubmit","values","actions","register","Notify","concat","resetForm","handleSubmit","validationSchema","_jsxs","autoComplete","type","placeholder","component","Register","isLoading","useSelector","selectIsLoading","error","selectError","Helmet","Loader","selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","contact","toLowerCase","includes"],"sourceRoot":""}