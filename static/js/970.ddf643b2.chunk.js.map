{"version":3,"file":"static/js/970.ddf643b2.chunk.js","mappings":"yQAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8CAMzBC,EAAYJ,EAAAA,GAAAA,IAAUK,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,6MAiBtBG,GALQN,EAAAA,GAAAA,MAAYO,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,wDAKDH,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAoBS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,0BAIvCO,GAAcV,EAAAA,EAAAA,IAAOW,EAAAA,GAAPX,CAAaY,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,qMAU3BU,EAASb,EAAAA,GAAAA,OAAac,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,6P,SCjC7BY,EAAeC,EAAAA,KAAaC,MAAM,CACpCC,MAAOF,EAAAA,KACJE,MAAM,yBACNC,SAAS,4BACZC,SAAUJ,EAAAA,KAAaG,SAAS,8BAGrBE,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CAAER,MAAO,GAAIE,SAAU,IACtCO,SAAU,SAACC,EAAQC,IARF,SAACD,EAAQC,GAC5BP,GAASQ,EAAAA,EAAAA,IAAMF,IACfC,EAAQE,UAAU,CAAEb,MAAO,GAAIE,SAAU,KACzCY,EAAAA,OAAAA,QAAe,0BACjB,CAKMC,CAAaL,EAAQC,EACvB,EACAK,iBAAkBnB,EAAaoB,UAE/BX,EAAAA,EAAAA,KAACzB,EAAU,CAACqC,aAAa,MAAKD,UAC5BE,EAAAA,EAAAA,MAACjC,EAAS,CAAA+B,SAAA,EACRE,EAAAA,EAAAA,MAAA,SAAAF,SAAA,EAEEX,EAAAA,EAAAA,KAACd,EAAW,CAAC4B,KAAK,QAAQC,KAAK,QAAQC,YAAY,WACnDhB,EAAAA,EAAAA,KAAClB,EAAgB,CAACgC,KAAK,QAAQG,UAAU,aAE3CJ,EAAAA,EAAAA,MAAA,SAAAF,SAAA,EAEEX,EAAAA,EAAAA,KAACd,EAAW,CAAC4B,KAAK,WAAWC,KAAK,WAAWC,YAAY,cACzDhB,EAAAA,EAAAA,KAAClB,EAAgB,CAACgC,KAAK,WAAWG,UAAU,aAE9CjB,EAAAA,EAAAA,KAACX,EAAM,CAAC0B,KAAK,SAAQJ,SAAC,iBAKhC,E,oBCxCa,SAASO,IACpB,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1B,OACEV,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEX,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAAAb,UACLX,EAAAA,EAAAA,KAAA,SAAAW,SAAO,aAETX,EAAAA,EAAAA,KAACH,EAAS,IACTsB,IAAanB,EAAAA,EAAAA,KAACyB,EAAAA,QAAO,IACrBH,IAAStB,EAAAA,EAAAA,KAAA,QAAAW,SAAM,iDAGtB,C,sKCjBWe,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAC/CR,EAAkB,SAAAM,GAAK,OAAIA,EAAMC,SAAST,SAAU,EACpDI,EAAc,SAAAI,GAAK,OAAIA,EAAMC,SAASN,KAAM,EAC5CQ,EAAe,SAAAH,GAAK,OAAIA,EAAMI,OAAOA,MAAO,EAE5CC,GAAwBC,EAAAA,EAAAA,IACnC,CAACP,EAAgBI,IACjB,SAACF,EAAUG,GACT,OAAOH,EAASG,QAAO,SAAAG,GAAO,OAC5BA,EAAQpB,KAAKqB,cAAcC,SAASL,EAAOI,cAAc,GAE7D,G","sources":["components/LoginForm/LoginForm.Styled.js","components/LoginForm/LoginForm.js","pages/Login.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n\n  width: 100%;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  padding: 15px;\n  background-color: #5dd7d2;\n  border: 1px solid #0daea7;\n  border-radius: 5px;\n  box-shadow: gray 1px 1px 5px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ErrMessageStyled = styled(ErrorMessage)`\n  color: red;\n`;\n\nexport const StyledField = styled(Field)`\n  width: 200px;\n  height: 40px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  border-radius: 4px;\n  margin: 0;\n  padding-left: 35px;\n`;\n\nexport const Button = styled.button`\n  width: 120px;\n  align-self: center;\n  padding: 10px;\n  color: white;\n  background-color: #4d83c2;\n  cursor: pointer;\n\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n`;\n","import { Formik } from 'formik';\nimport { Notify } from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from '../../redux/auth/operations';\nimport * as Yup from 'yup';\nimport { Button, Container, ErrMessageStyled, StyledField, StyledForm } from './LoginForm.Styled';\n\nconst ContactShema = Yup.object().shape({\n    email: Yup.string()\n      .email('Invalid email address')\n      .required('This is a required field'),\n    password: Yup.string().required('This is a required field'),\n  });\n  \n  export const LoginForm = () => {\n    const dispatch = useDispatch();\n    const handleSubmit = (values, actions) => {\n      dispatch(logIn(values));\n      actions.resetForm({ email: '', password: '' });\n      Notify.success(`Authorization completed`);\n    };\n    return (\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        onSubmit={(values, actions) => {\n          handleSubmit(values, actions);\n        }}\n        validationSchema={ContactShema}\n      >\n        <StyledForm autoComplete=\"off\">\n          <Container>\n            <label>\n              \n              <StyledField name=\"email\" type=\"email\" placeholder=\"Email\"/>\n              <ErrMessageStyled name=\"email\" component=\"span\" />\n            </label>\n            <label>\n              \n              <StyledField name=\"password\" type=\"password\" placeholder=\"Password\"/>\n              <ErrMessageStyled name=\"password\" component=\"span\" />\n            </label>\n            <Button type=\"submit\">Log In</Button>\n          </Container>\n        </StyledForm>\n      </Formik>\n    );\n  };","import { LoginForm } from \"components/LoginForm/LoginForm\";\nimport { Loading } from \"notiflix\";\nimport { Helmet } from \"react-helmet\";\nimport { useSelector } from \"react-redux\";\nimport { selectError, selectIsLoading } from \"../redux/contacts/selectors\";\n\nexport default function Login() {\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    return (\n      <div>\n        <Helmet>\n          <title>Login</title>\n        </Helmet>\n        <LoginForm />\n        {isLoading && <Loading/>}\n        {error && <span>Whoops... Error! Please, reload this page!</span>}\n      </div>\n    );\n  }","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","ErrMessageStyled","_templateObject3","ErrorMessage","_templateObject4","StyledField","Field","_templateObject5","Button","_templateObject6","ContactShema","Yup","shape","email","required","password","LoginForm","dispatch","useDispatch","_jsx","Formik","initialValues","onSubmit","values","actions","logIn","resetForm","Notify","handleSubmit","validationSchema","children","autoComplete","_jsxs","name","type","placeholder","component","Login","isLoading","useSelector","selectIsLoading","error","selectError","Helmet","Loading","selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","contact","toLowerCase","includes"],"sourceRoot":""}